/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool IsInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     int GetInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     IList<NestedInteger> GetList();
 * }
 */
public class NestedIterator {

    private List<int> onlyInts = new List<int>();
    private int idx = 0;

    public NestedIterator(IList<NestedInteger> nestedList) {
        foreach(var item in nestedList)
        {
            if(item.IsInteger())
            {
                onlyInts.Add(item.GetInteger());
            }
            else
            {
                /* holds a nested list */
                var nL = item.GetList();
                var nI = new NestedIterator(nL);
                while(nI.HasNext())
                {
                    onlyInts.Add(nI.Next());
                }
            }
        }
    }

    public bool HasNext() {
        if(idx < onlyInts.Count)
            return true;

        return false;
    }

    public int Next() {
        return onlyInts[idx++];
    }
}

/**
 * Your NestedIterator will be called like this:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.HasNext()) v[f()] = i.Next();
 */